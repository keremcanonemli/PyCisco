import os

from ntc_templates.parse import parse_output
from netmiko import ConnectHandler
import json
from openpyxl import *
import xlwt
import io

import textfsm


# --------------------FUNCTIONS-------------
# -----------Interface Value to Key Function ----------
def get_key(val, dictionary):
    for key, value in dictionary.items():
        if value == val:
            return key
            # return key değeri excel'de interface'in bulunduğu row değerini döner
    return "Error"


# -----------Interface Value to Key Function ----------

    # ------------Allowed Vlan Parser TextFSM
allowed_vlan_parser_template = io.StringIO("""\
Value Port (\S+(/\d+)?)
Value Vlans (\d+([-,]\d+)+)

Start
  ^Port\s+Vlans allowed on trunk$$ -> Begin

Begin
  ^${Port}\s+${Vlans}$$ -> Record
  ^Port\s+Vlans allowed and active in management domain$$ -> End
""")

    # ------------Allowed Vlan Parser TextFSM


# --------------------FUNCTIONS-------------


# -----------Load Workbook/Worksheet-----------

workbook = Workbook()
workbook.save("Portmap.xlsx")
wb = load_workbook('Portmap.xlsx')


def portmap_sheet(worksheet_name):
    worksheet = wb.create_sheet(title=worksheet_name)
    worksheet.cell(1, 1).value = "LOCAL PORT"
    worksheet.cell(1, 2).value = "PORT STATUS"
    worksheet.cell(1, 3).value = """L3/L2"""
    worksheet.cell(1, 4).value = "REMOTE DEVICE"
    worksheet.cell(1, 5).value = "REMOTE PORT"
    worksheet.cell(1, 6).value = "CHANNEL GROUP ID"
    worksheet.cell(1, 7).value = "CHANNEL MODE"
    worksheet.cell(1, 8).value = "ALLOWED VLANS"
    worksheet.cell(1, 9).value = "COMMENT"
    worksheet.cell(1, 10).value = "DESCRIPTION"
    wb.save(filename="Portmap.xlsx")


def svi_sheet(worksheet_name):
    worksheet = wb.create_sheet(title=worksheet_name)
    worksheet.cell(1, 1).value = "VLAN-ID"
    worksheet.cell(1, 2).value = "VLAN-NAME"
    worksheet.cell(1, 3).value = "SVI-ADDRESS"
    worksheet.cell(1, 4).value = "SUBNET-MASK"
    worksheet.cell(1, 5).value = "COMMENT"
    wb.save(filename="Portmap.xlsx")


# -----------Load Workbook/Worksheet-----------

# -----------Devices List-----------
device1 = {
    'device_type': 'cisco_ios',
    'host': '192.168.138.10',
    'username': 'keremcan',
    'password': 'onemli',
    'port': 22,
    'secret': '',
}
device2 = {
    'device_type': 'cisco_ios',
    'host': '192.168.138.20',
    'username': 'keremcan',
    'password': 'onemli',
    'port': 22,
    'secret': '',
}
device3 = {
    'device_type': 'cisco_ios',
    'host': '192.168.138.30',
    'username': 'keremcan',
    'password': 'onemli',
    'port': 22,
    'secret': '',
}
# -----------Devices List-----------

all_devices = [device1, device2,device3]
for device in all_devices:
    connect = ConnectHandler(**device)
    hostname = connect.find_prompt()
    if hostname.find(">") != -1:
        hostname = hostname.replace(">", "")  # -----Bağlandığı cihazın prompt'undaki > işaretini siler
    elif hostname.find("#") != -1:
        hostname = hostname.replace("#", "")  # -----Bağlandığı cihazın prompt'undaki # işaretini siler

    portmap_sheet_name = hostname + "-PORTMAP-TABLE"
    svi_sheet_name = hostname + "-SVI-TABLE"
    portmap_sheet(portmap_sheet_name)  # -----Bağlandığı cihazın portmap sheet'ini oluştur
    svi_sheet(svi_sheet_name)  # -----Bağlandığı cihazın svi sheet'ini oluştur
    # -----Bağlandığı cihazın portmap ve svi sheetlerini oluştur
    print(wb.sheetnames)
    # -----------Connect Device-----------
    #------------Mkdir--------------------

    os.mkdir("./config_backups/"+hostname)
    #------------Mkdir--------------------
    #------------Dosya Oluştur-------------
    runconfigtxt = io.open("./config_backups/"+hostname+'''/'''+hostname+"_RUNNING.txt", 'w')
    startconfigtxt = io.open("./config_backups/"+hostname+'''/'''+hostname+"_STARTUP.txt", 'w')
    #------------Dosya Oluştur-------------

    # ------------Config Kayıt-------------
    show_run_conf = connect.send_command("show running-config")
    runconfigtxt.write(show_run_conf)
    runconfigtxt.close()
    show_run_conf = connect.send_command("show startup-config")
    startconfigtxt.write(show_run_conf)
    startconfigtxt.close()
    # ------------Config Kayıt-------------

    # -----------Interface Brief----------
    interface_brief_output = connect.send_command("show ip interface brief")
    interface_parsed = parse_output(platform="cisco_ios", command="show ip interface brief",
                                    data=interface_brief_output)
    # -----------Interface Brief----------

    # -----------Interfaces Dictionary----------------------
    row = 2
    interfaces_dictionary = {}
    short_interfaces_dictionary = {}
    for item in interface_parsed:

        if item["intf"].startswith("FastEthernet"):
            wb[portmap_sheet_name].cell(row, 1).value = item["intf"].replace("FastEthernet", "Fa")
            wb[portmap_sheet_name].cell(row, 2).value = item["status"]
            interfaces_dictionary[row] = item["intf"]
            short_interfaces_dictionary[row] = item["intf"].replace("FastEthernet", "Fa")
            row += 1
        elif item["intf"].startswith("GigabitEthernet"):
            wb[portmap_sheet_name].cell(row, 1).value = item["intf"].replace("GigabitEthernet", "Gi")
            wb[portmap_sheet_name].cell(row, 2).value = item["status"]
            interfaces_dictionary[row] = item["intf"]
            short_interfaces_dictionary[row] = item["intf"].replace("GigabitEthernet", "Gi")
            row += 1
        elif item["intf"].startswith("TwoGigabitEthernet"):
            wb[portmap_sheet_name].cell(row, 1).value = item["intf"].replace("TwoGigabitEthernet", "Tw")
            wb[portmap_sheet_name].cell(row, 2).value = item["status"]
            interfaces_dictionary[row] = item["intf"]
            short_interfaces_dictionary[row] = item["intf"].replace("TwoGigabitEthernet", "Tw")
            row += 1
        elif item["intf"].startswith("FiveGigabitEthernet"):
            wb[portmap_sheet_name].cell(row, 1).value = item["intf"].replace("FiveGigabitEthernet", "Fi")
            wb[portmap_sheet_name].cell(row, 2).value = item["status"]
            interfaces_dictionary[row] = item["intf"]
            short_interfaces_dictionary[row] = item["intf"].replace("FiveGigabitEthernet", "Fi")
            row += 1
        elif item["intf"].startswith("TenGigabitEthernet"):
            wb[portmap_sheet_name].cell(row, 1).value = item["intf"].replace("TenGigabitEthernet", "Te")
            wb[portmap_sheet_name].cell(row, 2).value = item["status"]
            interfaces_dictionary[row] = item["intf"]
            short_interfaces_dictionary[row] = item["intf"].replace("TenGigabitEthernet", "Te")
            row += 1
        elif item["intf"].startswith("TwentyFiveGig"):
            wb[portmap_sheet_name].cell(row, 1).value = item["intf"].replace("TwentyFiveGig", "Twe")
            wb[portmap_sheet_name].cell(row, 2).value = item["status"]
            interfaces_dictionary[row] = item["intf"]
            short_interfaces_dictionary[row] = item["intf"].replace("TwentyFiveGig", "Twe")
            row += 1
        elif item["intf"].startswith("Ethernet"):
            wb[portmap_sheet_name].cell(row, 1).value = item["intf"].replace("Ethernet", "Eth")
            wb[portmap_sheet_name].cell(row, 2).value = item["status"]
            interfaces_dictionary[row] = item["intf"]
            short_interfaces_dictionary[row] = item["intf"].replace("Ethernet", "Eth")
            row += 1

        elif item["intf"].startswith("Port-channel"):
            wb[portmap_sheet_name].cell(row, 1).value = item["intf"].replace("Port-channel", "Po")
            wb[portmap_sheet_name].cell(row, 2).value = item["status"]
            interfaces_dictionary[row] = item["intf"]
            short_interfaces_dictionary[row] = item["intf"].replace("Port-channel", "Po")
            row += 1
        elif item["intf"].startswith("Vlan"):
            wb[portmap_sheet_name].cell(row, 1).value = item["intf"].replace("Vlan", "Vl")
            wb[portmap_sheet_name].cell(row, 2).value = item["status"]
            interfaces_dictionary[row] = item["intf"]
            short_interfaces_dictionary[row] = item["intf"].replace("Vlan", "Vl")
            row += 1
    wb.save("Portmap.xlsx")
    print(interfaces_dictionary)
    print(interfaces_dictionary[2])
    # -----------Interfaces Dictionary----------------------

    row = 2
    for int_col_num in range(2, len(interfaces_dictionary) + 1):
        interface = interfaces_dictionary[int_col_num]
        try:
            sendcommand = """show interfaces """ + interface + """ switchport"""
            interfaces_switchport_output = connect.send_command(str(sendcommand))
            command_str = """show interfaces switchport"""

            interfaces_switchport_parsed = parse_output(platform="cisco_ios", command=str(command_str),
                                                        data=interfaces_switchport_output)

            for item in interfaces_switchport_parsed:
                if item["switchport"] == "Enabled":
                    wb[portmap_sheet_name].cell(row, 3).value = "L2"
                elif item["switchport"] == "Disabled":
                    wb[portmap_sheet_name].cell(row, 3).value = "L3"
            row += 1
        except:
            print("Error Detected")

    wb.save("Portmap.xlsx")

    # -----------Cdp Neighbors Detail------
    cdp_neigh_det_output = connect.send_command("show cdp neighbors detail")
    cdp_neigh_det_parsed = parse_output(platform="cisco_ios", command="show cdp neighbors detail",
                                        data=cdp_neigh_det_output)

    print(json.dumps(cdp_neigh_det_parsed, indent=4))

    for item in cdp_neigh_det_parsed:
        cdp = get_key(item["local_port"], interfaces_dictionary)
        if cdp != "Error":
            wb[portmap_sheet_name].cell(cdp, 4).value = item["destination_host"]
            wb[portmap_sheet_name].cell(cdp, 5).value = item["remote_port"]
        cdp = ""
    wb.save("Portmap.xlsx")
    # -----------Cdp Neighbors Detail------

    # -----------Lldp Neighbors Detail Reel Cihazlarla Denenecek------
    # cdp_neigh_det_output = connect.send_command("show lldp neighbors detail")
    # cdp_neigh_det_parsed = parse_output(platform="cisco_ios", command="show lldp neighbors detail", data= cdp_neigh_det_output)
    #
    # print(json.dumps(cdp_neigh_det_parsed,indent=4))
    #
    # for item in cdp_neigh_det_parsed:
    #     cdp=get_key(item["local_port"],interfaces_dictionary)
    #     if cdp!="Error":
    #         worksheet.cell(cdp, 4).value = item["destination_host"]
    #         worksheet.cell(cdp, 5).value = item["remote_port"]
    #     cdp=""
    # wb.save("Portmap.xlsx")
    # -----------Lldp Neighbors Detail Reel Cihazlarla Denenecek------

    # -----------Etherchannel Summary------
    eth_summary_output = connect.send_command("show etherchannel summary")
    eth_summary_parsed = parse_output(platform="cisco_ios", command="show etherchannel summary",
                                      data=eth_summary_output)
    print(json.dumps(eth_summary_parsed, indent=4))  # burası print kısmı sonra kaldırılacak

    for item in eth_summary_parsed:
        for interface_item in item["interfaces"]:
            po = get_key(interface_item, short_interfaces_dictionary)
            wb[portmap_sheet_name].cell(po, 6).value = item["po_name"]
            sh_run_int = connect.send_command("""show run interface""" + interface_item)
            if sh_run_int.find("mode active"):
                wb[portmap_sheet_name].cell(po, 7).value = "Active"
            elif sh_run_int.find("mode one"):
                wb[portmap_sheet_name].cell(po, 7).value = "On"

    wb.save("Portmap.xlsx")
    # -----------Etherchannel Summary------

    # -----------Allowed Vlan------



    for int_col_num in range(2, len(short_interfaces_dictionary) + 2):
        interface = short_interfaces_dictionary[int_col_num]

        print(interface)
        allowed_vlan_output = connect.send_command("""show interface """ + interface + """ trunk""")

        fsm = textfsm.TextFSM(allowed_vlan_parser_template)
        result = fsm.ParseText(allowed_vlan_output)
        row_id = get_key(interface, short_interfaces_dictionary)
        try:
            print(result[0][1])
            wb[portmap_sheet_name].cell(row_id, 8).value = result[0][1]
            wb[portmap_sheet_name].cell(row_id, 9).value = "Trunk"

        except:
            wb[portmap_sheet_name].cell(row_id, 9).value = "Access"
            print("Have no result")
            wb[portmap_sheet_name].cell(row_id, 8).value = "No Result"

    wb.save("Portmap.xlsx")
    # -----------Allowed Vlan------

    # ------------Interfaces Desc----
    int_desc_output = connect.send_command("""show interfaces description""")
    int_desc_parsed = parse_output(platform="cisco_ios", command="show interfaces description", data=int_desc_output)
    print(json.dumps(int_desc_parsed, indent=4))
    for item in int_desc_parsed:
        row_id = get_key(item["port"], short_interfaces_dictionary)
        try:
            wb[portmap_sheet_name].cell(row_id, 10).value = item["descrip"]
        except:
            wb[portmap_sheet_name].cell(row_id, 10).value = "No Description"
    wb.save("Portmap.xlsx")
    # ------------Interfaces Desc----

    # ------------SVI----

    ip_int_output = connect.send_command("""show ip interface brief""")
    ip_int_parsed = parse_output(platform="cisco_ios", command="show ip interface brief", data=ip_int_output)
    print(json.dumps(ip_int_parsed ,indent=4))
    sh_vlan_output = connect.send_command("""show vlan brief""")
    sh_vlan_parsed = parse_output(platform="cisco_ios", command="show vlan brief", data=sh_vlan_output)
    row = 2

    for item in sh_vlan_parsed:

        wb[svi_sheet_name].cell(row, 1).value = item["vlan_id"]
        wb[svi_sheet_name].cell(row, 2).value = item["name"]
        for interface in ip_int_parsed:
            x = interface["intf"]
            try:
                if int(item["vlan_id"]) == int(x[4:]):
                    wb[svi_sheet_name].cell(row, 3).value = interface["ipaddr"]
                    #break
            except:
                print("Error - - - - This is not SVI")
        row += 1
    wb.save("Portmap.xlsx")
    row = wb[svi_sheet_name].max_row+1

    for item in ip_int_parsed:
        if item["ipaddr"] != "unassigned" and item["intf"].find("Vla") == -1:
            wb[svi_sheet_name].cell(row, 1).value = item["intf"]
            wb[svi_sheet_name].cell(row, 3).value = item["ipaddr"]
            row+=1
    wb.save("Portmap.xlsx")
    # print(json.dumps(sh_vlan_parsed ,indent=4))

    # ------------SVI----

# -----------SVI ORGN----------
#     #Burada sadece vlan interface'lerin ip addresslerini tabloya yazdırıyor
#
#     ip_int_output = connect.send_command("""show ip interface brief""")
#     ip_int_parsed = parse_output(platform="cisco_ios", command="show ip interface brief", data=ip_int_output)
#     print(json.dumps(ip_int_parsed, indent=4))
#     sh_vlan_output = connect.send_command("""show vlan brief""")
#     sh_vlan_parsed = parse_output(platform="cisco_ios", command="show vlan brief", data=sh_vlan_output)
#     row = 2
#     for item in sh_vlan_parsed:
#
#         wb[svi_sheet_name].cell(row, 1).value = item["vlan_id"]
#         wb[svi_sheet_name].cell(row, 2).value = item["name"]
#         for interface in ip_int_parsed:
#             x = interface["intf"]
#             try:
#                 if int(item["vlan_id"]) == int(x[4:]):
#                     wb[svi_sheet_name].cell(row, 3).value = interface["ipaddr"]
#                     break
#             except:
#                 print("Error - - - - This is not SVI")
#         row += 1
#
#     wb.save("Portmap.xlsx")
#     # print(json.dumps(sh_vlan_parsed ,indent=4))

    # ------------SVI----

# -----------SVI ORGN----------
